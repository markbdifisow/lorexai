const axios = require('axios');

function convertToBold(text) {
  const boldMap = {
    'a': 'ùóÆ','b': 'ùóØ','c': 'ùó∞','d': 'ùó±','e': 'ùó≤','f': 'ùó≥','g': 'ùó¥','h': 'ùóµ','i': 'ùó∂','j': 'ùó∑',
    'k': 'ùó∏','l': 'ùóπ','m': 'ùó∫','n': 'ùóª','o': 'ùóº','p': 'ùóΩ','q': 'ùóæ','r': 'ùóø','s': 'ùòÄ','t': 'ùòÅ',
    'u': 'ùòÇ','v': 'ùòÉ','w': 'ùòÑ','x': 'ùòÖ','y': 'ùòÜ','z': 'ùòá',
    'A': 'ùóî','B': 'ùóï','C': 'ùóñ','D': 'ùóó','E': 'ùóò','F': 'ùóô','G': 'ùóö','H': 'ùóõ','I': 'ùóú','J': 'ùóù',
    'K': 'ùóû','L': 'ùóü','M': 'ùó†','N': 'ùó°','O': 'ùó¢','P': 'ùó£','Q': 'ùó§','R': 'ùó•','S': 'ùó¶','T': 'ùóß',
    'U': 'ùó®','V': 'ùó©','W': 'ùó™','X': 'ùó´','Y': 'ùó¨','Z': 'ùó≠',
  };
  return text.split('').map(char => boldMap[char] || char).join('');
}

const responseOpeners = [
  "ùóöùóΩùòÅ-ùü∞ùóº ùóôùóøùó≤ùó≤"
];

module.exports.config = {
  name: 'ai',
  version: '1.1.7',
  hasPermission: 0,
  usePrefix: false,
  aliases: ['gpt', 'keijo'],
  description: "An AI command powered by Gemini Vision",
  usages: "ai [prompt]",
  credits: 'LorexAi',
  cooldowns: 3
};

async function sendTemp(api, threadID, message) {
  return new Promise(resolve => {
    api.sendMessage(message, threadID, (err, info) => resolve(info));
  });
}

module.exports.run = async function({ api, event, args }) {
  const input = args.join(' ');
  const uid = event.senderID;
  const threadID = event.threadID;
  const messageID = event.messageID;

  const isPhotoReply = event.type === "message_reply"
    && Array.isArray(event.messageReply?.attachments)
    && event.messageReply.attachments.some(att => att.type === "photo");

  if (isPhotoReply) {
    const photoUrl = event.messageReply.attachments?.[0]?.url;
    if (!photoUrl) return api.sendMessage("‚ùå Could not get image URL.", threadID, messageID);
    if (!input) return api.sendMessage("üì∏ Please provide a prompt along with the image.", threadID, messageID);

    const tempMsg = await sendTemp(api, threadID, "üîç Analyzing image...");

    try {
      const { data } = await axios.get('https://daikyu-api.up.railway.app/api/gemini-pro', {
        params: {
          ask: input,
          uid: uid,
          imageURL: photoUrl
        }
      });

      if (data?.reply) {
        const opener = responseOpeners[Math.floor(Math.random() * responseOpeners.length)];
        return api.editMessage(`${opener}\n\n${data.reply}`, tempMsg.messageID, threadID);
      }

      return api.editMessage("‚ö†Ô∏è Unexpected response from Vision API.", tempMsg.messageID, threadID);
    } catch (err) {
      console.error(err);
      return api.editMessage("‚ùå Error analyzing image.", tempMsg.messageID, threadID);
    }
  }

  // === GPT-4o TEXT MODE ===
  if (!input) return api.sendMessage("Yup, ùêäùêûùê¢ùê£ùê® ùêÄùê¢ ako! üòé Nandito ako para tulungan ka sa mga tanong, gawain, o kahit na pag-uusap lang. Anong gusto mo gawin o pag-usapan?ü•∞", threadID, messageID);

  const tempMsg = await sendTemp(api, threadID, "üîÑ Generating...");

  try {
    const { data } = await axios.get('https://daikyu-api.up.railway.app/api/o3-mini', {
      params: {
        prompt: input,
        uid: uid
      }
    });

    if (!data?.response) {
      return api.editMessage("‚ùå No response received. Try again.", tempMsg.messageID, threadID);
    }

    const formatted = data.response
      .replace(/\*\*(.*?)\*\*/g, (_, t) => convertToBold(t))
      .replace(/##(.*?)##/g, (_, t) => convertToBold(t))
      .replace(/###\s*/g, '')
      .replace(/\n{3,}/g, '\n\n');

    const opener = responseOpeners[Math.floor(Math.random() * responseOpeners.length)];
    return api.editMessage(`${opener}\n\n${formatted}`, tempMsg.messageID, threadID);

  } catch (err) {
    console.error(err);
    return api.editMessage("‚ö†Ô∏è Something went wrong. Try again later.", tempMsg.messageID, threadID);
  }
};
